name: Unit Tests

on:
  push:
    branches: [main]  # Run the tests on pushes to the 'main' branch
  pull_request:
    branches: [main]  # Run the tests on pull requests targeting the 'main' branch

jobs:
  frontend-backend-integration-tests:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_DB: SoCalSocial
          POSTGRES_USER: username
          POSTGRES_PASSWORD: examplepassword

        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

        ports:
          - "5432:5432"

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Environment
        run: |
          cd frontend
          touch .env
          echo "REACT_APP_BACKEND_URL=http://127.0.0.1:8000" >> .env
      - name: Install Backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt
      - name: Set up Database with Tables and Mock Data
        run: |
          cd backend
          python -m src.db_store.main
      - name: Run backend
        run: |
          cd backend
          python -m uvicorn src.app:app --host 0.0.0.0 --port 8000 --reload > backend.log 2>&1 &
          echo $! > backend.pid
      - name: Install npm Dependencies
        run: |
          cd frontend
          npm install
      - name: Wait for Backend to be Ready
        timeout-minutes: 2  # Add timeout to prevent infinite wait
        run: |
          while ! nc -z localhost 8000; do
            echo "Waiting for backend to be ready..."
            sleep 2
          done
      - name: Try backend request
        run: |
          curl -X POST http://127.0.0.1:8000/user/login \
          -F "username=username1@example.com" \
          -F "password=password"
      - name: Unit Test
        run: |
          cd frontend
          npm test
      - name: Cleanup backend
        if: always()  # Run this step even if previous steps fail
        run: |
          if [ -f backend/backend.pid ]; then
            kill $(cat backend/backend.pid)
          fi

  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_DB: SoCalSocial
          POSTGRES_USER: username
          POSTGRES_PASSWORD: examplepassword

        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

        ports:
          - "5432:5432"
        
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install Dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Set up Database with Tables and Mock Data
        run: |
          cd backend
          python -m src.db_store.main

      - name: Run Python Tests
        run: |
          cd backend
          pytest --maxfail=0 --disable-warnings -q
